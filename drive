#!/usr/bin/env python
import sys
import numpy
from matplotlib import pyplot as plt
from scipy.misc import imread

class Visualization:
    def __init__(self, static_map):
        '''
        Args:
            static_map (Map) - map of the world
        '''
        self.static_map = static_map
        self.fig = fig = plt.figure()
        self.ax = fig.add_subplot(111)

        # Draw the map
        m = self.static_map
        self.ax.imshow(m.arr, aspect='equal', extent=(0.0, m.x_max, 0.0, m.y_max), cmap=plt.cm.Greys_r)

    def redraw(self):
        pass

class Map:
    def __init__(self, filename, scale=0.05):
        '''
        Origin is assumed to be 0.0, 0.0.

        Args:
            scale (float) - size of each pixel in meters
        '''
        self.arr = imread(filename)
        self.scale = scale
        self.x_max = self.arr.shape[1] * self.scale
        self.y_max = self.arr.shape[0] * self.scale

    def map_to_pixel(self, map_coords):
        '''
        Convert map coordinates to pixel indices.

        Args:
            coord - numpy array or tuple of (x, y)

        Returns:
            Tuple of (row_i, col_i)
        '''
        x, y = map_coords

        # flip y since increasing rows in a map image go in -y driection
        return int((self.y_max - y) / self.scale), int(x / self.scale)

    def pixel_to_map(self, pixel_coords):
        row_i, col_i = pixel_coords
        return self.scale * col_i, self.y_max - self.scale * row_i


if __name__ == '__main__':
    static_map = Map(sys.argv[1], scale=0.05)
    vis = Visualization(static_map)
    plt.show()

